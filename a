[1mdiff --git a/config/tax_law/baseline/tax_law/baseline/ed.yaml b/config/tax_law/baseline/tax_law/baseline/ed.yaml[m
[1mindex 2935a21..8818400 100644[m
[1m--- a/config/tax_law/baseline/tax_law/baseline/ed.yaml[m
[1m+++ b/config/tax_law/baseline/tax_law/baseline/ed.yaml[m
[36m@@ -15,31 +15,43 @@[m [mfiling_status_mapper:[m
     '2': llc_po_thresh_single * 2[m
     '3': llc_po_thresh_single[m
     '4': llc_po_thresh_single[m
[32m+[m[32m  llc_po_range:[m
[32m+[m[32m    '1': llc_po_range_single[m
[32m+[m[32m    '2': llc_po_range_single * 2[m
[32m+[m[32m    '3': llc_po_range_single[m
[32m+[m[32m    '4': llc_po_range_single[m
 [m
[32m+[m[32m# AOC credit rate per dollar of qualifying expenses[m
 aoc_rates:[m
   value: [1.0, 0.25, 0.0][m
 [m
[32m+[m[32m# Expense brackets for AOC credit rates[m
 aoc_brackets:[m
   value: [0, 2000, 4000][m
[31m-  [m
[32m+[m
[32m+[m[32m# AGI threshold above which AOC phases out, single filers[m
 aoc_po_thresh_single:[m
   value: 80000[m
[31m-[m
[32m+[m[41m  [m
[32m+[m[32m# AGI range over which AOC phases out[m
 aoc_po_range_single:[m
   value: 10000[m
   [m
 # Share of credit available as refundable credit[m
 aoc_refund_rate:[m
   value: 0.4[m
[31m-  [m
[32m+[m
[32m+[m[32m# LLC credit rate per dollar of qualifying expenses[m
 llc_rates:[m
   value: [0.2, 0.0][m
[31m-  [m
[32m+[m
[32m+[m[32m# Expense brackets for LLC credit rates[m
 llc_brackets:[m
   value: [0, 10000][m
 [m
[32m+[m[32m# AGI threshold above which LLC phases out[m
 llc_po_thresh_single:[m
[31m-  value: [m
[32m+[m[32m  value:[m
     '2014': 40000[m
     '2021': 80000[m
   i_measure:[m
[36m@@ -50,6 +62,7 @@[m [mllc_po_thresh_single:[m
   i_direction: -1[m
   i_increment: 1000[m
 [m
[32m+[m[32m# AGI range over which LLC phases out[m
 llc_po_range_single:[m
   value: 10000[m
   [m
[1mdiff --git a/src/calc/functions/credits/ctc.R b/src/calc/functions/credits/ctc.R[m
[1mindex ac436f1..957cbea 100644[m
[1m--- a/src/calc/functions/credits/ctc.R[m
[1m+++ b/src/calc/functions/credits/ctc.R[m
[36m@@ -114,7 +114,7 @@[m [mcalc_ctc = function(tax_unit, fill_missings = F) {[m
       # Additional Child Tax Credit[m
       #-----------------------------[m
       [m
[31m-      # Calculate unused CTC [m
[32m+[m[32m      # Calculate unused CTC[m
       remaining_ctc = value1 + value2 + value_other - ctc, [m
       [m
       # Limit to max per-child refundable credit value[m
[1mdiff --git a/src/calc/functions/credits/ed_cred.R b/src/calc/functions/credits/ed_cred.R[m
[1mindex 6ef7247..d758598 100644[m
[1m--- a/src/calc/functions/credits/ed_cred.R[m
[1m+++ b/src/calc/functions/credits/ed_cred.R[m
[36m@@ -3,7 +3,7 @@[m
 #-----------------------------------------[m
 [m
 [m
[31m-calc_ed_credit = function(tax_unit, fill_missings = F) {[m
[32m+[m[32mcalc_ed_credits = function(tax_unit, fill_missings = F) {[m
   [m
   #----------------------------------------------------------------------------[m
   # Calculates value of the American Opportunity Credit (AOC) and the Lifetime [m
[36m@@ -16,26 +16,81 @@[m [mcalc_ed_credit = function(tax_unit, fill_missings = F) {[m
   #                            with 0s (used in testing, not in simulation)[m
   #[m
   # Returns: dataframe of following variables:[m
[31m-  #          - aoc (dbl) : value of AOC[m
[31m-  #          - llc (dbl) : value of LLC[m
[32m+[m[32m  #   - ed_nonref (dbl) : value of refundable AOC[m
[32m+[m[32m  #   - ed_ref (dbl)    : value of LLC and nonrefundable AOC[m[41m [m
   #----------------------------------------------------------------------------[m
   [m
   req_vars = c([m
[31m-    'TODO',        # (dbl, self)  TODO: List required variables here[m
[32m+[m[41m    [m
[32m+[m[32m    # Tax unit attributes[m
[32m+[m[32m    'agi',      # (dbl) Adjusted Gross Income[m
[32m+[m[32m    'aoc_exp',  # (dbl) AOC-qualifying education expenses[m[41m [m
[32m+[m[32m    'llc_exp',  # (dbl) LLC-qualifying education expenses[m
[32m+[m[32m    'liab_bc',  # (dbl) income tax liability before credits (including AMT)[m
[32m+[m[32m    'ftc',      # (dbl) value of foreign tax credit value[m
[32m+[m[32m    'cdctc',    # (dbl) Child and Dependent Care Tax Credit[m
[32m+[m[32m    'old_cred', # (dbl) value of Elderly and Disabled Credit[m
[32m+[m[41m    [m
[32m+[m[32m    # Tax law attributes[m
[32m+[m[32m    'ed.aoc_rates[]',      # (dbl[]) AOC credit rate per dollar of qualifying expenses[m
[32m+[m[32m    'ed.aoc_brackets[]',   # (int[]) expense brackets for AOC credit rates[m
[32m+[m[32m    'ed.aoc_po_thresh',    # (int)   AGI threshold above which AOC phases out[m[41m [m
[32m+[m[32m    'ed.aoc_po_range',     # (int)   AGI range over which AOC phases out[m
[32m+[m[32m    'ed.aoc_refund_rate',  # (dbl)   share of AOC value available as refundable credit[m
[32m+[m[32m    'ed.llc_rates[]',      # (dbl[]) AOC credit rate per dollar of qualifying expenses[m
[32m+[m[32m    'ed.llc_brackets[]',   # (int[]) expense brackets for LLC credit rates[m
[32m+[m[32m    'ed.llc_po_thresh',    # (dbl)   AGI threshold above which LLC phases out[m
[32m+[m[32m    'ed.llc_po_range'      # (int)   AGI range over which LLC phases out[m
   )[m
   [m
   tax_unit %>% [m
     [m
     # Parse tax unit object passed as argument[m
     parse_calc_fn_input(req_vars, fill_missings) %>% [m
[32m+[m[41m    [m
[32m+[m[32m    # Calculate credit-eligible expenses for both credits[m[41m [m
[32m+[m[32m    bind_cols([m
[32m+[m[32m      integrate_rates_brackets([m
[32m+[m[32m        df              = (.),[m[41m [m
[32m+[m[32m        n_brackets      = NULL,[m
[32m+[m[32m        prefix_brackets = 'ed.aoc_brackets',[m
[32m+[m[32m        prefix_rates    = 'ed.aoc_rates',[m
[32m+[m[32m        y               = 'aoc_exp',[m
[32m+[m[32m        output_name     = 'aoc',[m
[32m+[m[32m        by_bracket      = F[m
[32m+[m[32m      ),[m
[32m+[m[32m      integrate_rates_brackets([m
[32m+[m[32m        df              = (.),[m[41m [m
[32m+[m[32m        n_brackets      = NULL,[m
[32m+[m[32m        prefix_brackets = 'ed.llc_brackets',[m
[32m+[m[32m        prefix_rates    = 'ed.llc_rates',[m
[32m+[m[32m        y               = 'llc_exp',[m
[32m+[m[32m        output_name     = 'llc',[m
[32m+[m[32m        by_bracket      = F[m
[32m+[m[32m      )[m
[32m+[m[32m    ) %>%[m[41m [m
[32m+[m[41m    [m
     mutate([m
       [m
[31m-      # TODO: Calculate Education Credits logic[m
[32m+[m[32m      # Phase out AOC[m
[32m+[m[32m      po_share_aoc = pmin(1, pmax(0, agi - ed.aoc_po_thresh) / ed.aoc_po_range),[m
[32m+[m[32m      aoc          = aoc * (1 - po_share_aoc),[m
[32m+[m[41m      [m
[32m+[m[32m      # Allocate AOC between refundable and nonrefundable components[m[41m [m
[32m+[m[32m      aoc_ref    = aoc * ed.aoc_refund_rate,[m
[32m+[m[32m      aoc_nonref = aoc - aoc_ref,[m
       [m
[32m+[m[32m      # Phase out LLC[m[41m [m
[32m+[m[32m      po_share_llc = pmin(1, pmax(0, agi - ed.llc_po_thresh) / ed.llc_po_range),[m
[32m+[m[32m      llc          = llc * (1 - po_share_llc),[m
       [m
[32m+[m[32m      # Limit nonrefundable credit to positive liability[m
[32m+[m[32m      liab      = pmax(0, liab_bc - ftc - cdctc - old_cred),[m
[32m+[m[32m      ed_nonref = pmin(liab, aoc_nonref + llc)[m
[32m+[m[41m    [m
     ) %>% [m
     [m
     # Keep variables to return[m
[31m-    select(aoc, llc) %>% [m
[32m+[m[32m    select(ed_nonref, ed_ref = aoc_ref) %>%[m[41m [m
     return()[m
 }[m
[1mdiff --git a/src/calc/utils.R b/src/calc/utils.R[m
[1mindex 913cbf4..bfa335c 100644[m
[1m--- a/src/calc/utils.R[m
[1m+++ b/src/calc/utils.R[m
[36m@@ -156,7 +156,7 @@[m [mintegrate_rates_brackets = function(df, n_brackets, prefix_brackets,[m
                     .fn   = ~ paste0(prefix_rates, 1))[m
     }[m
   }[m
[31m-[m
[32m+[m[41m  [m
   # Add (n+1)th bracket, used to calculate taxable income in excess of top bracket[m
   df[[paste0(prefix_brackets, n_brackets + 1)]] = Inf[m
   [m
[36m@@ -172,7 +172,7 @@[m [mintegrate_rates_brackets = function(df, n_brackets, prefix_brackets,[m
       [m
       # Determine lesser of next bracket or income[m
       inc = pmin(df[[paste0(prefix_brackets, i + 1)]], df[[y]])[m
[31m-      [m
[32m+[m
       # Calculate as excess over this bracket[m
       excess = pmax(0, inc - df[[paste0(prefix_brackets, i)]])[m
       [m
[1mdiff --git a/src/main.R b/src/main.R[m
[1mindex 76c8e00..14f77e6 100644[m
[1m--- a/src/main.R[m
[1m+++ b/src/main.R[m
[36m@@ -68,6 +68,12 @@[m [mtax_law = build_tax_law(config_path = './config/tax_law/baseline/tax_law/baselin[m
                         indexes     = indexes)[m
 [m
 [m
[32m+[m[32m#-----------------[m
[32m+[m[32m# Calculate taxes[m
[32m+[m[32m#-----------------[m
[32m+[m
[32m+[m[32msource('./src/calc/utils.R')[m
[32m+[m
 #----------------------[m
 # Produce output files[m
 #----------------------[m
